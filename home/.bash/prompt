#!/bin/bash

#
#  Name:     rdodson41/dot-files/home/.bash/prompt
#  Author:   Richard E. Dodson <richard.elias.dodson@gmail.com>
#  Created:  Thu Oct 15 00:23:06 UTC 2015
#  License:  GNU General Public License, Version 3, 29 June 2007
#
#  Copyright (C) 2015 Richard E. Dodson <richard.elias.dodson@gmail.com>
#  
#  This file is part of dot-files.
#  
#  dot-files is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#  
#  dot-files is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with dot-files. If not, see <http://www.gnu.org/licenses/>.
#

#  Echo git branch color
git-branch-color() {
	local git_branch="$(git symbolic-ref --short HEAD 2> /dev/null)"
	if [[ -n "${git_branch}" ]]; then
		local git_branch_upstream="$(git rev-parse --abbrev-ref "${git_branch}@{upstream}" 2> /dev/null)"
		if [[ -n "${git_branch_upstream}" ]]; then
			local git_remote="$(git config --local --get "branch.${git_branch}.remote" 2> /dev/null)"
			if [[ -n "${git_remote}" ]]; then
				local git_remote_head="$(git symbolic-ref --short "refs/remotes/${git_remote}/HEAD" 2> /dev/null)"
				if [[ -n "${git_remote_head}" && "${git_branch_upstream}" == "${git_remote_head}" ]]; then
					echo -e "${color_bold_red}"
				else
					echo -e "${color_bold_green}"
				fi
			else
				echo -e "${color_bold_green}"
			fi
		else
			echo -e "${color_bold_green}"
		fi
	fi
}

#  Echo git branch
git-branch() {
	local git_branch="$(git symbolic-ref --short HEAD 2> /dev/null)"
	if [[ -n "${git_branch}" ]]; then
		echo " [${git_branch}]"
	fi
}

#  Echo git status color
git-status-color() {
	echo -e "${color_bold_red}"
}

#  Echo git status
git-status() {
	if [[ "$(git diff --quiet --staged 2> /dev/null; echo "$?")" = 1 ]]; then
		echo " [+]"
	elif [[ "$(git diff --quiet 2> /dev/null; echo "$?")" = 1 ]]; then
		echo " [!]"
	elif [[ -n "$(git ls-files --exclude-standard --others 2> /dev/null)" ]]; then
		echo " [?]"
	fi
}

#  Set the top-level command line prompt
PS1=

#  Colorize the user name bold red if the user is logged in as root; otherwise, colorize the user name bold yellow
if [[ "${USER}" == "root" ]]; then
	PS1="${PS1}\[${color_bold_red}\]\u"
else
	PS1="${PS1}\[${color_bold_yellow}\]\u"
fi

PS1="${PS1}\[${color_normal}\]@"

#  Colorize the host name bold red if the user is logged in via ssh; otherwise, colorize the host name bold yellow
if [[ -n "${SSH_TTY}" ]]; then
	PS1="${PS1}\[${color_bold_red}\]\h"
else
	PS1="${PS1}\[${color_bold_yellow}\]\h"
fi

PS1="${PS1}\[${color_normal}\]:"
PS1="${PS1}\[${color_bold_blue}\]\w"
PS1="${PS1}\[\$(git-branch-color)\]\$(git-branch)"
PS1="${PS1}\[\$(git-status-color)\]\$(git-status)"

#  Terminate the top-level command line prompt with # if the user is looged in as root; otherwise, terminate the top-level command line prompt with $
if [[ "${USER}" == "root" ]]; then
	PS1="${PS1}\[${color_normal}\] # "
else
	PS1="${PS1}\[${color_normal}\] \$ "
fi
