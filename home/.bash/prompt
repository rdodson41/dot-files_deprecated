#!/bin/bash

#
#  Name:     rdodson41/dot-files/home/.bash/prompt
#  Author:   Richard E. Dodson <richard.elias.dodson@gmail.com>
#  Created:  Thu Oct 15 00:23:06 UTC 2015
#  License:  GNU General Public License, Version 3, 29 June 2007
#
#  Copyright (C) 2015 Richard E. Dodson <richard.elias.dodson@gmail.com>
#
#  This file is part of dot-files.
#
#  dot-files is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  dot-files is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with dot-files. If not, see <http://www.gnu.org/licenses/>.
#

#  Echo git branch color
echo-git-branch-color()
{
	local git_branch_color="\e[0;1;38;5;2m"
	local git_branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null)"
	if [[ -n "${git_branch}" ]]; then
		local git_branch_upstream="$(git rev-parse --quiet --abbrev-ref "${git_branch}@{upstream}" 2> /dev/null)"
		if [[ -n "${git_branch_upstream}" ]]; then
			local git_remote="$(git config --local --get "branch.${git_branch}.remote" 2> /dev/null)"
			if [[ -n "${git_remote}" ]]; then
				local git_remote_head="$(git symbolic-ref --quiet --short "refs/remotes/${git_remote}/HEAD" 2> /dev/null)"
				if [[ -n "${git_remote_head}" && "${git_branch_upstream}" == "${git_remote_head}" ]]; then
					git_branch_color="\e[0;1;38;5;1m"
				fi
			fi
		fi
	fi
	printf "${git_branch_color}"
}

#  Echo git branch
echo-git-branch()
{
	local git_branch="$(git symbolic-ref --quiet --short HEAD 2> /dev/null)"
	if [[ -n "${git_branch}" ]]; then
		echo " [${git_branch}]"
	fi
}

#  Echo git status color
echo-git-status-color()
{
	local git_status_color="\e[0;1;38;5;1m"
	printf "${git_status_color}"
}

#  Echo git status
echo-git-status()
{
	if [[ "$(git diff --quiet --staged 2> /dev/null; echo "${?}")" = 1 ]]; then
		echo " [+]"
	elif [[ "$(git diff --quiet 2> /dev/null; echo "${?}")" = 1 ]]; then
		echo " [!]"
	elif [[ -n "$(git ls-files --exclude-standard --others 2> /dev/null)" ]]; then
		echo " [?]"
	fi
}

#  Set top-level command line prompt
export PS1=

#  Colorize user name bold red if user is logged in as root; otherwise, colorize user name bold yellow
if [[ "${USER}" == "root" ]]; then
	PS1="${PS1}\[\e[0;1;38;5;1m\]\u"
else
	PS1="${PS1}\[\e[0;1;38;5;3m\]\u"
fi

PS1="${PS1}\[\e[0m\]@"

#  Colorize host name bold red if user is logged in via ssh; otherwise, colorize host name bold yellow
if [[ -n "${SSH_TTY}" ]]; then
	PS1="${PS1}\[\e[0;1;38;5;1m\]\h"
else
	PS1="${PS1}\[\e[0;1;38;5;3m\]\h"
fi

PS1="${PS1}\[\e[0m\]:"
PS1="${PS1}\[\e[0;1;38;5;4m\]\w"
PS1="${PS1}\[\$(echo-git-branch-color)\]\$(echo-git-branch)"
PS1="${PS1}\[\$(echo-git-status-color)\]\$(echo-git-status)"

#  Terminate top-level command line prompt with # if user is logged in as root; otherwise, terminate top-level command line prompt with $
if [[ "${USER}" == "root" ]]; then
	PS1="${PS1}\[\e[0m\] # "
else
	PS1="${PS1}\[\e[0m\] \$ "
fi
